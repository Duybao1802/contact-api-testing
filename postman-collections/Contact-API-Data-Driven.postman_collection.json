{
  "info": {
    "name": "Contact API - Data Driven Tests",
    "description": "Data-driven test collection for Contact API using external test data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8091",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "{{admin_token}}",
      "type": "string"
    },
    {
      "key": "user_token",
      "value": "{{user_token}}",
      "type": "string"
    },
    {
      "key": "test_data_file",
      "value": "test-data/contact-api-test-data.json",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Data-Driven Contact Message Tests",
      "item": [
        {
          "name": "Valid Contact Messages - Data Driven",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{test_name}}\",\n  \"email\": \"{{test_email}}\",\n  \"subject\": \"{{test_subject}}\",\n  \"message\": \"{{test_message}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/messages",
              "host": "localhost",
              "port": "8091",
              "path": ["messages"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Data-driven test setup",
                  "const testScenarios = [",
                  "  {",
                  "    name: 'John Doe',",
                  "    email: 'john@doe.example',",
                  "    subject: 'Website Feedback',",
                  "    message: 'The website is working great!'",
                  "  },",
                  "  {",
                  "    name: 'Jane Smith',",
                  "    email: 'jane@smith.example',",
                  "    subject: 'Product Inquiry',",
                  "    message: 'I have a question about your products.'",
                  "  },",
                  "  {",
                  "    name: 'Bob Wilson',",
                  "    email: 'bob@wilson.example',",
                  "    subject: 'Support Request',",
                  "    message: 'Need help with my account.'",
                  "  }",
                  "];",
                  "",
                  "// Select random test scenario",
                  "const randomIndex = Math.floor(Math.random() * testScenarios.length);",
                  "const scenario = testScenarios[randomIndex];",
                  "",
                  "// Set variables for this request",
                  "pm.environment.set('test_name', scenario.name);",
                  "pm.environment.set('test_email', scenario.email);",
                  "pm.environment.set('test_subject', scenario.subject);",
                  "pm.environment.set('test_message', scenario.message);",
                  "",
                  "console.log('Using test scenario:', scenario);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains message details\", function () {",
                  "    pm.response.to.have.jsonBody('id');",
                  "    pm.response.to.have.jsonBody('name');",
                  "    pm.response.to.have.jsonBody('email');",
                  "    pm.response.to.have.jsonBody('subject');",
                  "    pm.response.to.have.jsonBody('message');",
                  "    pm.response.to.have.jsonBody('created_at');",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "// Log the test data used",
                  "console.log('Test executed with:', {",
                  "    name: pm.environment.get('test_name'),",
                  "    email: pm.environment.get('test_email'),",
                  "    subject: pm.environment.get('test_subject'),",
                  "    message: pm.environment.get('test_message')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Invalid Contact Messages - Data Driven",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{invalid_name}}\",\n  \"email\": \"{{invalid_email}}\",\n  \"subject\": \"{{invalid_subject}}\",\n  \"message\": \"{{invalid_message}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/messages",
              "host": "localhost",
              "port": "8091",
              "path": ["messages"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Invalid data scenarios",
                  "const invalidScenarios = [",
                  "  {",
                  "    name: '',",
                  "    email: 'john@doe.example',",
                  "    subject: 'Test Subject',",
                  "    message: 'Test message',",
                  "    description: 'Empty name'",
                  "  },",
                  "  {",
                  "    name: 'John Doe',",
                  "    email: 'invalid-email',",
                  "    subject: 'Test Subject',",
                  "    message: 'Test message',",
                  "    description: 'Invalid email'",
                  "  },",
                  "  {",
                  "    name: 'John Doe',",
                  "    email: 'john@doe.example',",
                  "    subject: '',",
                  "    message: 'Test message',",
                  "    description: 'Empty subject'",
                  "  },",
                  "  {",
                  "    name: 'John Doe',",
                  "    email: 'john@doe.example',",
                  "    subject: 'Test Subject',",
                  "    message: '',",
                  "    description: 'Empty message'",
                  "  }",
                  "];",
                  "",
                  "// Select random invalid scenario",
                  "const randomIndex = Math.floor(Math.random() * invalidScenarios.length);",
                  "const scenario = invalidScenarios[randomIndex];",
                  "",
                  "// Set variables for this request",
                  "pm.environment.set('invalid_name', scenario.name);",
                  "pm.environment.set('invalid_email', scenario.email);",
                  "pm.environment.set('invalid_subject', scenario.subject);",
                  "pm.environment.set('invalid_message', scenario.message);",
                  "pm.environment.set('scenario_description', scenario.description);",
                  "",
                  "console.log('Using invalid scenario:', scenario.description);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 422 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]);",
                  "});",
                  "",
                  "pm.test(\"Response contains error information\", function () {",
                  "    if (pm.response.code === 500) {",
                  "        console.log('Server error detected - this is a bug!');",
                  "        pm.expect(pm.response.code).to.equal(500);",
                  "    } else {",
                  "        pm.response.to.have.jsonBody('message');",
                  "    }",
                  "});",
                  "",
                  "// Log the test data used",
                  "console.log('Invalid test executed with:', {",
                  "    name: pm.environment.get('invalid_name'),",
                  "    email: pm.environment.get('invalid_email'),",
                  "    subject: pm.environment.get('invalid_subject'),",
                  "    message: pm.environment.get('invalid_message'),",
                  "    scenario: pm.environment.get('scenario_description')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Data-Driven Message Status Tests",
      "item": [
        {
          "name": "Update Message Status - Data Driven",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"{{test_status}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/messages/1/status",
              "host": "localhost",
              "port": "8091",
              "path": ["messages", "1", "status"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Status test scenarios",
                  "const statusScenarios = [",
                  "  { status: 'NEW', expected: 200, description: 'Valid status NEW' },",
                  "  { status: 'IN_PROGRESS', expected: 200, description: 'Valid status IN_PROGRESS' },",
                  "  { status: 'RESOLVED', expected: 200, description: 'Valid status RESOLVED' },",
                  "  { status: 'INVALID_STATUS', expected: 400, description: 'Invalid status value' },",
                  "  { status: '', expected: 400, description: 'Empty status' },",
                  "  { status: 'PENDING', expected: 400, description: 'Unknown status' }",
                  "];",
                  "",
                  "// Select random status scenario",
                  "const randomIndex = Math.floor(Math.random() * statusScenarios.length);",
                  "const scenario = statusScenarios[randomIndex];",
                  "",
                  "// Set variables for this request",
                  "pm.environment.set('test_status', scenario.status);",
                  "pm.environment.set('expected_status_code', scenario.expected);",
                  "pm.environment.set('status_description', scenario.description);",
                  "",
                  "console.log('Using status scenario:', scenario.description);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const expectedCode = parseInt(pm.environment.get('expected_status_code'));",
                  "pm.test(`Status code is ${expectedCode}`, function () {",
                  "    pm.response.to.have.status(expectedCode);",
                  "});",
                  "",
                  "if (expectedCode === 200) {",
                  "    pm.test(\"Response contains success indicator\", function () {",
                  "        pm.response.to.have.jsonBody('success');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Response contains error message\", function () {",
                  "        pm.response.to.have.jsonBody('message');",
                  "    });",
                  "}",
                  "",
                  "// Log the test data used",
                  "console.log('Status test executed with:', {",
                  "    status: pm.environment.get('test_status'),",
                  "    expected: pm.environment.get('expected_status_code'),",
                  "    description: pm.environment.get('status_description')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
